{
  "tags": [
    "Kubernetes",
    "OpenShift",
    "Cloud Foundry",
    "Cloud Functions",
    "Infrastructure"
  ],
  "categories": [
    {
      "name": "Getting Started",
      "anchor": "gettingstarted",
      "tocOnly": true,
      "solutions": [
        {
          "name": "Getting Started",
          "url": "getting-started.html",
          "description": "Configure your development environment to be productive with IBM Cloud.",
          "imgSrc": "images/gettingstarted/logo.jpg"
        }
      ]
    },
    {
      "name": "Websites and Web Apps",
      "anchor": "websites",
      "solutions": [
        {
          "name": "Scalable web app on Kubernetes",
          "url": "scalable-webapp-kubernetes.html",
          "description": "Scaffold a Java web application, run it locally in a container and then deploy it to a Kubernetes cluster. Additionally, bind a custom domain, monitor the health of the environment and scale.",
          "imgSrc": "images/solution2/Architecture.png",
          "tags": [
            "Docker",
            "Kubernetes",
            "Container Service",
            "Container Registry",
            "Java"
          ],
          "requirements": [
            "container_registry",
            "kubernetes_service",
            "ibmcloud_cli",
            "ibmcloud_plugin_dev",
            "docker"
          ],
          "supportsCloudShell": false
        },
        {
          "name": "Move a VM based application to Kubernetes",
          "url": "vm-to-containers-and-kubernetes.html",
          "description": "Take a VM based application, containerize it, deploy it to a Kubernetes cluster. Use the steps as a general guides for other applications.",
          "imgSrc": "images/solution30/modern_architecture.png",
          "tags": [
            "Kubernetes",
            "Container Service",
            "File Storage",
            "MySQL",
            "Java"
          ],
          "requirements": [
            "container_registry",
            "kubernetes_service",
            "ibmcloud_cli",
            "docker"
          ],
          "supportsCloudShell": false
        },
        {
          "name": "Strategies for resilient applications",
          "url": "strategies-for-resilient-applications.html",
          "description": "Regardless of the Compute option: Kubernetes, Cloud Foundry, Cloud Functions or Virtual Servers, enterprises seek to minimize downtime and create resilient architectures that achieve maximum availability.",
          "imgSrc": "images/solution39/Architecture.png",
          "tags": [
            "Kubernetes",
            "Cloud Foundry",
            "Cloud Functions",
            "Infrastructure",
            "Bare Metal",
            "Databases",
            "File Storage",
            "Watson"
          ],
          "requirements": [
            "container_registry",
            "kubernetes_service",
            "ibmcloud_cli",
            "docker",
            "cloudant",
            "cloud_object_storage",
            "cloud_internet_services",
            "cloud_functions",
            "cloud_foundry"
          ],
          "supportsCloudShell": "not_applicable"
        },
        {
          "name": "Continuous Deployment to Kubernetes",
          "url": "continuous-deployment-to-kubernetes.html",
          "description": "Set up a continuous integration and delivery pipeline for containerized applications running on a Kubernetes cluster. Add integrations to other services like security scanners, Slack notifications, and analytics.",
          "imgSrc": "images/solution21/Architecture.png",
          "tags": [
            "Kubernetes",
            "Container Service",
            "Docker",
            "Slack",
            "DevOps",
            "Node.js",
            "Vulnerability Advisor"
          ],
          "requirements": [
            "container_registry",
            "kubernetes_service",
            "ibmcloud_cli",
            "ibmcloud_plugin_dev",
            "docker",
            "continuous_delivery"
          ],
          "supportsCloudShell": false
        },
        {
          "name": "Scalable web app on OpenShift",
          "url": "scalable-webapp-openshift.html",
          "description": "Scaffold a nodejs web application, run it locally in a container and then deploy it to an OpenShift cluster. Additionally, bind a custom domain, monitor the health of the environment and scale.",
          "imgSrc": "images/solution50-scalable-webapp-openshift/Architecture.png",
          "featuredPosition": 2,
          "tags": [
            "OpenShift",
            "Container Service",
            "Container Registry",
            "Node.js"
          ],
          "requirements": [
            "container_registry",
            "openshift_on_ibm_cloud",
            "ibmcloud_cli",
            "ibmcloud_plugin_dev",
            "docker"
          ],
          "supportsCloudShell": false
        },
        {
          "name": "Service Mesh on OpenShift",
          "url": "openshift-service-mesh.html",
          "description": "Install Red Hat OpenShift Service Mesh alongside microservices for a sample app called BookInfo in a Red Hat OpenShift on IBM Cloud cluster.",
          "imgSrc": "images/solution57-openshift-service-mesh/Architecture.png",
          "tags": [
            "OpenShift",
            "Service Mesh",
            "Istio",
            "Telemetry"
          ],
          "requirements": [
            "openshift_on_ibm_cloud"
          ]
        },
        {
          "name": "Deploy microservices with OpenShift",
          "url": "openshift-microservices.html",
          "description": "Deploy microservices to an OpenShift cluster, view their logs and metrics, use an operator to provision IBM Cloud services.",
          "imgSrc": "images/solution55-openshift-microservices/openshift-microservices.drawio.png",
          "tags": [
            "OpenShift",
            "Log Analysis",
            "Availability Monitoring"
          ],
          "requirements": [
            "openshift_on_ibm_cloud",
            "docker",
            "logdna",
            "sysdig"
          ]
        },
        {
          "name": "Accelerate delivery of static files using Object Storage and CDN",
          "url": "static-files-cdn.html?pos=2",
          "description": "Host and serve website assets (images, videos, documents) and user generated content in a Cloud Object Storage and use a Content Delivery Network (CDN) for fast and secure delivery to users around the world.",
          "imgSrc": "images/solution3/Architecture.png",
          "tags": [
            "Cloud Foundry",
            "Node.js",
            "Content Delivery Network",
            "Cloud Object Storage"
          ],
          "requirements": [
            "cloud_object_storage",
            "content_delivery_network",
            "ibmcloud_cli",
            "ibmcloud_plugin_dev",
            "cloud_foundry"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Accelerate a dynamic website using Dynamic Content Acceleration",
          "url": "dynamic-content-cdn.html?pos=2",
          "description": "Use Dynamic Content Acceleration to reduce latency for dynamic and uncacheable contents of your web application.",
          "imgSrc": "images/solution52-cdn-dca/solution_52_architecture.png",
          "tags": [
            "Content Delivery Network",
            "Kubernetes",
            "Container Service",
            "Docker"
          ],
          "requirements": [
            "kubernetes_service",
            "content_delivery_network",
            "ibmcloud_cli",
            "docker",
            "container_registry"
          ],
          "supportsCloudShell": false
        },
        {
          "name": "Asynchronous data processing using object storage and pub/sub messaging",
          "url": "pub-sub-object-storage.html",
          "description": "Use the Apache Kafka based Message Hub to orchestrate workloads between microservices running in a Kubernetes cluster and store data in Object Storage.",
          "imgSrc": "images/solution25/Architecture.png",
          "tags": [
            "Kubernetes",
            "Node.js",
            "Java",
            "Message hub",
            "Cloud Object Storage"
          ],
          "requirements": [
            "kubernetes_service",
            "cloud_object_storage",
            "ibmcloud_cli",
            "ibmcloud_plugin_dev",
            "event_stream",
            "docker",
            "container_registry"
          ],
          "supportsCloudShell": false
        },
        {
          "name": "Web application on LAMP stack",
          "url": "lamp-stack.html",
          "description": "Create an Ubuntu Linux virtual server, with Apache web server, MySQL, and PHP. Then install and configure the WordPress open source application on the LAMP stack.",
          "imgSrc": "images/solution4/Architecture.png",
          "tags": [
            "Infrastructure",
            "PHP",
            "WordPress",
            "Vulnerability Scanner"
          ],
          "requirements": [
            "virtual_servers"
          ],
          "supportsCloudShell": "yes_with_modifications",
          "lastUpdated": "2019-05-20"
        },
        {
          "name": "Deploy a LAMP stack using Terraform",
          "url": "infrastructure-as-code-terraform.html",
          "description": "Use Terraform to provision a Linux virtual server, with Apache web server, MySQL, PHP and the IBM Cloud Object Storage service. Update the configuration to scale the resources and tune the environment.",
          "imgSrc": "images/solution10/architecture-2.png",
          "tags": [
            "Terraform",
            "Infrastructure",
            "PHP",
            "Object Storage"
          ],
          "requirements": [
            "virtual_servers",
            "cloud_object_storage",
            "terraform"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Plan, create and update deployment environments",
          "url": "plan-create-update-deployments.html",
          "description": "Automate the creation and maintenance of multiple deployment environments with IBM Cloud CLI and Terraform.",
          "imgSrc": "images/solution26-plan-create-update-deployments/architecture.png",
          "tags": [
            "Terraform",
            "Kubernetes",
            "Cloud Foundry",
            "Identity and Access Management"
          ],
          "requirements": [
            "virtual_servers",
            "cloud_object_storage",
            "cloudant",
            "terraform"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Use Virtual Servers to build highly available and scalable web app",
          "url": "highly-available-and-scalable-web-application.html",
          "description": "Create a load balancer, two application servers running on Ubuntu with NGINX and PHP installed, one MySQL database server, and durable file storage to store application files and backups.",
          "imgSrc": "images/solution14/Architecture.png",
          "tags": [
            "Infrastructure",
            "Load Balancer",
            "PHP",
            "File Storage"
          ],
          "requirements": [
            "virtual_servers",
            "file_storage",
            "cloud_internet_services",
            "cloud_load_balancers",
            "vpn"
          ],
          "supportsCloudShell": "yes_with_modifications",
          "cloudShellComments": "Using VPN is optional which may not work with cloudshell"
        },
        {
          "name": "Modern web application using MEAN stack",
          "url": "mean-stack.html",
          "description": "Build a web application using the popular MEAN stack - Mongo DB, Express, Angular, Node.js. Run the app locally, create and use a database-as-a-service, deploy the app and monitor the application.",
          "imgSrc": "images/solution7/Architecture.png",
          "tags": [
            "Cloud Foundry",
            "Node.js",
            "Compose for MongoDB"
          ],
          "requirements": [
            "cloud_foundry",
            "databases_for_mongodb"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "SQL Database for Cloud Data",
          "url": "sql-database.html",
          "description": "Provision a SQL relational database service, create a table, and load a large data set into the database. Deploy a web app to make use of that data and show how to access the cloud database.",
          "imgSrc": "images/solution5/Architecture.png",
          "tags": [
            "Cloud Foundry",
            "Python",
            "Db2 Warehouse"
          ],
          "requirements": [
            "cloud_foundry",
            "db2_warehouse"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Serverless web application and API",
          "url": "serverless-api-webapp.html",
          "description": "Create a serverless web application by hosting static website content in GitHub Pages and using Cloud Functions to implement the application backend.",
          "imgSrc": "images/solution8/Architecture.png",
          "tags": [
            "Cloud Functions",
            "API Gateway",
            "Cloudant NoSQL DB"
          ],
          "requirements": [
            "cloud_functions",
            "cloudant",
            "api_gateway"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Deploy serverless apps across multiple regions",
          "url": "multi-region-serverless.html",
          "description": "Use Cloud Functions and Internet Services to build globally available and secure serverless applications.",
          "imgSrc": "images/solution44-multi-region-serverless/Architecture.png",
          "tags": [
            "Internet Services",
            "Cloud Functions",
            "Certificate Manager"
          ],
          "requirements": [
            "cloud_functions",
            "cloud_internet_services",
            "certificate_manager"
          ],
          "supportsCloudShell": "not_applicable"
        },
        {
          "name": "Analyze logs and monitor application health with LogDNA and Sysdig",
          "url": "application-log-analysis.html",
          "description": "Use IBM Log Analysis with LogDNA to understand and diagnose application activities. Monitor applications with IBM Cloud Monitoring with Sysdig.",
          "imgSrc": "images/solution12/Architecture.png",
          "tags": [
            "Kubernetes",
            "Python",
            "Log Analysis",
            "Availability Monitoring"
          ],
          "requirements": [
            "container_registry",
            "kubernetes_service",
            "docker",
            "logdna",
            "sysdig"
          ],
          "supportsCloudShell": false
        }
      ]
    },
    {
      "name": "Chatbots",
      "anchor": "chatbots",
      "solutions": [
        {
          "name": "Build a database-driven Slackbot",
          "url": "slack-chatbot-database-watson.html?pos=2",
          "description": "Build a database-driven Slackbot with IBM Watson Assistant, Cloudant and IBM Cloud Functions.",
          "imgSrc": "images/solution19/SlackbotArchitecture.png",
          "tags": [
            "Cloud Foundry",
            "IBM Watson Assistant",
            "Cloudant NoSQL DB",
            "Db2 Warehouse",
            "Cloud Functions",
            "Slack"
          ],
          "requirements": [
            "cloud_functions",
            "db2_on_cloud"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Build a voice-enabled Android chatbot",
          "url": "android-watson-chatbot.html",
          "description": "Define intents, entities and build a dialog flow for the chatbot to respond to customer's queries. Enable speech to text and text to speech services for easy interaction with the Android app.",
          "imgSrc": "images/solution28-watson-chatbot-android/architecture.png",
          "tags": [
            "IBM Watson Assistant",
            "Speech to Text",
            "Text to Speech",
            "Android"
          ],
          "requirements": [
            "watson_assistant",
            "speech_to_text",
            "text_to_speech",
            "android_studio"
          ],
          "supportsCloudShell": "not_applicable"
        }
      ]
    },
    {
      "name": "Security",
      "anchor": "security",
      "solutions": [
        {
          "name": "Secure web application across multiple regions",
          "url": "multi-region-webapp.html?pos=2",
          "description": "Create, secure, deploy, and load balance a web application across multiple regions using a continuous delivery pipeline.",
          "imgSrc": "images/solution1/Architecture.png",
          "tags": [
            "Cloud Foundry",
            "Node.js",
            "Continuous Delivery",
            "Cloud Internet Services"
          ],
          "requirements": [
            "cloud_internet_services",
            "continuous_delivery"
          ],
          "supportsCloudShell": "yes_with_modifications",
          "cloudShellComments": "do not modify now, wait for future cloud shell IDE support"
        },
        {
          "name": "Resilient and secure multi-region Kubernetes clusters",
          "url": "multi-region-k8s-cis.html?pos=2",
          "description": "Integrate Cloud Internet Services with Kubernetes clusters to deliver a resilient and secure solution across multiple regions.",
          "imgSrc": "images/solution32-multi-region-k8s-cis/Architecture.png",
          "tags": [
            "Kubernetes",
            "Container Registry",
            "Cloud Internet Services"
          ],
          "requirements": [
            "cloud_internet_services",
            "container_registry",
            "kubernetes_service",
            "docker"
          ],
          "supportsCloudShell": false
        },
        {
          "name": "Create, secure and manage REST APIs",
          "url": "create-manage-secure-apis.html",
          "description": "Create a new REST API using the LoopBack Node.js API framework. Add management, visibility, security and rate limiting to the API using the API Connect service on IBM Cloud.",
          "imgSrc": "images/solution13/Architecture.png",
          "tags": [
            "Cloud Foundry",
            "Node.js",
            "API Connect"
          ],
          "requirements": [
            "api_connect",
            "api_designer"
          ],
          "supportsCloudShell": false
        },
        {
          "name": "Apply end to end security to a cloud application",
          "url": "cloud-e2e-security.html",
          "description": "Create a secure cloud application that features data encrypted with your own keys, user authentication, and security auditing.",
          "imgSrc": "images/solution34-cloud-e2e-security/Architecture.png",
          "tags": [
            "Kubernetes",
            "Encryption",
            "Security",
            "App ID",
            "Cloud Object Storage",
            "Key Protect",
            "Activity Tracker"
          ],
          "requirements": [
            "kubernetes_service",
            "container_registry",
            "certificate_manager",
            "app_id",
            "cloud_object_storage",
            "cloudant",
            "key_protect",
            "logdna"
          ],
          "supportsCloudShell": false
        },
        {
          "name": "Enhance security of your deployed application",
          "url": "extended-app-security.html",
          "description": "Enhance security of your cloud application by isolating compute, network and runtime resources.",
          "imgSrc": "images/solution51-extended-app-security/Sol51_Architecture.png",
          "tags": [
            "Encryption",
            "Security",
            "App ID",
            "Key Protect",
            "Hyper Protect",
            "Activity Tracker"
          ],
          "requirements": [
            "certificate_manager",
            "key_protect",
            "logdna"
          ],
          "supportsCloudShell": "not_applicable"
        }
      ]
    },
    {
      "name": "Mobile",
      "anchor": "mobile",
      "solutions": [
        {
          "name": "iOS mobile app with Push Notifications",
          "url": "ios-mobile-push-analytics.html",
          "description": "Create an iOS Swift application with Push Notifications on IBM Cloud.",
          "imgSrc": "images/solution6/Architecture.png",
          "tags": [
            "iOS",
            "Swift",
            "Push Notifications"
          ],
          "requirements": [
            "xcode",
            "app_id"
          ],
          "supportsCloudShell": "not_applicable"
        },
        {
          "name": "Android native mobile app with Push Notifications",
          "url": "android-mobile-push-analytics.html",
          "description": "Write an Android native application with Push Notifications on IBM Cloud.",
          "imgSrc": "images/solution9/Architecture.png",
          "tags": [
            "Android",
            "Java",
            "Push Notifications"
          ],
          "requirements": [
            "android_studio"
          ],
          "supportsCloudShell": "not_applicable"
        },
        {
          "name": "Mobile application with a serverless backend",
          "url": "serverless-mobile-backend.html?pos=2",
          "description": "Use Cloud Functions with cognitive and data services to build a serverless backend for a mobile application.",
          "imgSrc": "images/solution11/Architecture.png",
          "tags": [
            "Cloud Functions",
            "App ID",
            "Cloudant NoSQL DB",
            "Watson Tone Analyzer",
            "Push Notifications"
          ],
          "requirements": [
            "app_id",
            "cloud_functions",
            "cloudant",
            "tone_analyzer",
            "android_studio"
          ],
          "supportsCloudShell": "not_applicable"
        }
      ]
    },
    {
      "name": "Machine Learning and Analytics",
      "anchor": "ml",
      "solutions": [
        {
          "name": "Big data logs with streaming analytics and SQL",
          "url": "big-data-log-analytics.html",
          "description": "Collect, store and analyze log records to support regulatory requirements and aid information discovery. Using publish-subscribe messaging, scale the solution to millions of records and then perform analysis on persisted logs with familiar SQL.",
          "imgSrc": "images/solution31/Architecture.png",
          "tags": [
            "Cloud Object Storage",
            "Event Streams",
            "SQL Query",
            "Streaming Analytics",
            "Analytics Engine"
          ],
          "requirements": [
            "sql_query",
            "cloud_object_storage",
            "streaming_analytics",
            "event_stream",
            "analytics_engine",
            "kafka_client"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Build a data lake with Object Storage",
          "url": "smart-data-lake.html",
          "description": "Provide tools to data scientists to query data using SQL Query and conduct analysis in Watson Studio. Share data and insights through interactive charts.",
          "imgSrc": "images/solution29/architecture.png",
          "tags": [
            "Cloud Object Storage",
            "SQL Query",
            "Watson Studio"
          ],
          "requirements": [
            "sql_query",
            "cloud_object_storage",
            "watson_studio",
            "cognos_dashboard",
            "ibmcloud_cli"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Combining serverless and Cloud Foundry for data retrieval and analytics",
          "url": "serverless-github-traffic-analytics.html?pos=2",
          "description": "Automatically collect GitHub traffic statistics for repositories, store them in a SQL database and get started with traffic analytics.",
          "imgSrc": "images/solution24-github-traffic-analytics/Architecture.png",
          "tags": [
            "Db2 Warehouse",
            "App ID",
            "Cloud Functions",
            "GitHub"
          ],
          "requirements": [
            "cognos_dashboard",
            "ibmcloud_cli",
            "db2_warehouse",
            "cloud_functions",
            "app_id",
            "cloud_foundry"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Build, deploy, test and monitor a predictive machine learning model",
          "url": "create-deploy-retrain-machine-learning-model.html",
          "description": "Build a predictive machine learning model, deploy it as an API, test and retrain the model with feedback data.",
          "imgSrc": "images/solution22-build-machine-learning-model/architecture_diagram.png",
          "tags": [
            "Machine Learning",
            "Apache Spark",
            "Watson Studio",
            "Cloud Object Storage",
            "Db2 Warehouse"
          ],
          "requirements": [
            "watson_studio",
            "cloud_object_storage",
            "machine_learning",
            "watson_openscale",
            "db2_warehouse"
          ],
          "supportsCloudShell": "not_applicable"
        },
        {
          "name": "Analyze and visualize open data with Apache Spark",
          "url": "big-data-analytics-spark.html",
          "description": "Analyze and visualize open data sets using a Jupyter Notebook. Uses the Apache Spark service with IBM Watson Studio and Pixiedust to generate graphics.",
          "imgSrc": "images/solution23/Architecture.png",
          "tags": [
            "Apache Spark",
            "Watson Studio",
            "Cloud Object Storage"
          ],
          "requirements": [
            "watson_studio",
            "cloud_object_storage",
            "analytics_engine"
          ],
          "supportsCloudShell": "not_applicable"
        }
      ]
    },
    {
      "name": "Internet of Things",
      "anchor": "iot",
      "solutions": [
        {
          "name": "Gather, visualize and analyze IoT data",
          "url": "gather-visualize-analyze-iot-data.html",
          "description": "Set up an IoT device, gather large amounts of data in the Watson IoT Platform, analyze data with machine learning and create visualizations.",
          "imgSrc": "images/solution16/Architecture.png",
          "tags": [
            "Cloud Foundry",
            "Internet of Things Platform",
            "Cloudant",
            "Watson Studio",
            "Apache Spark",
            "Cloud Object Storage"
          ],
          "requirements": [
            "watson_studio",
            "cloud_object_storage",
            "analytics_engine",
            "cloudant",
            "iot_platform",
            "cloud_foundry"
          ],
          "supportsCloudShell": "yes_with_modifications"
        }
      ]
    },
    {
      "name": "Work In Progress",
      "hidden": "hidden",
      "anchor": "working",
      "solutions": [
        {
          "name": "Solution Template",
          "url": "solution-template.html",
          "description": "Solution Template",
          "imgSrc": ""
        },
        {
          "name": "Image Classification with Code Engine",
          "url": "image-classification-code-engine.hidden.html",
          "description": "Create a Code Engine project and deploy an image classification application",
          "imgSrc": "images/solution54-code-engine-hidden/architecture_diagram.png",
          "tags": [
            "code engine",
            "Knative",
            "Kubernetes"
          ]
        },
        {
          "name": "VPC interconnectivity using Transit Gateway and DNS with Team based isolation",
          "url": "vpc-tg-dns-iam.hidden.html",
          "description": "Connect VPCs and connect with Transit Gateway.  Use DNS name resolution for microservices.  Work in isolated teams, one per VPC",
          "imgSrc": "images/solution59-vpc-tg-dns-iam-hidden/architecture.png",
          "tags": [
            "VPC",
            "Linux"
          ]
        },
        {
          "name": "PHP web application on a LAMP Stack in VPC Gen2",
          "url": "lamp-stack-on-vpc.hidden.html",
          "description": "Create an Ubuntu Linux virtual server, with Apache web server, MySQL, and PHP. Then install and configure the WordPress open source application on the LAMP stack.",
          "imgSrc": "images/solution4/Architecture.png",
          "tags": [
            "VPC",
            "LAMP Stack",
            "Ubuntu",
            "Linux",
            "Apache",
            "MySQL",
            "PHP",
            "WordPress"
          ]
        }
      ]
    },
    {
      "name": "Identity and Access Management",
      "anchor": "iam",
      "solutions": [
        {
          "name": "Best practices for organizing users, teams, applications",
          "url": "users-teams-applications.html",
          "description": "An overview of the concepts available in IBM Cloud to manage identity and access management and how they can be implemented to support the multiple development stages of an application.",
          "imgSrc": "images/solution20-users-teams-applications/architecture.png",
          "tags": [
            "Identity and Access Management",
            "Kubernetes",
            "Container Service",
            "Container Registry",
            "DevOps"
          ],
          "requirements": [],
          "supportsCloudShell": "not_applicable"
        }
      ]
    },
    {
      "name": "Virtual Private Cloud",
      "anchor": "VPC",
      "anchors": [
        "Network"
      ],
      "solutions": [
        {
          "name": "Public frontend and private backend in a Virtual Private Cloud",
          "url": "vpc-public-app-private-backend.html",
          "description": "Create a virtual private cloud with subnets and instances. Secure your resources by attaching security groups and only allow minimal access.",
          "imgSrc": "images/solution40-vpc-public-app-private-backend/Architecture.png",
          "tags": [
            "Infrastructure",
            "Virtual Private Cloud",
            "Network"
          ],
          "requirements": [
            "vpc"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Deploy isolated workloads across multiple locations and zones",
          "url": "vpc-multi-region.html",
          "description": "Deploy a workload in virtual private clouds across multiple zones and regions. Distribute traffic across zones with local and global load balancers.",
          "imgSrc": "images/solution41-vpc-multi-region/Architecture.png",
          "tags": [
            "Infrastructure",
            "Virtual Private Cloud",
            "Network"
          ],
          "requirements": [
            "vpc",
            "cloud_internet_services",
            "certificate_manager",
            "docker"
          ],
          "supportsCloudShell": "yes_with_modifications",
          "cloudShellComments": "change the let's encrypt process to not use Docker"
        },
        {
          "name": "Use a VPC/VPN gateway for secure and private on-premises access to cloud resources",
          "url": "vpc-site2site-vpn.html",
          "description": "Connect a Virtual Private Cloud to another computing environment over a secure Virtual Private Network and consume IBM Cloud services.",
          "imgSrc": "images/solution46-vpc-vpn/ArchitectureDiagram.png",
          "featuredPosition": 1,
          "tags": [
            "Infrastructure",
            "Virtual Private Cloud",
            "Network"
          ],
          "requirements": [
            "ibmcloud_cli",
            "vpc",
            "vpc_vpn",
            "cloud_object_storage",
            "databases_for_postgresql",
            "bash",
            "jq"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Install software on virtual server instances in VPC",
          "url": "vpc-app-deploy.html",
          "description": "Learn how to use the IBM Cloud CLI, Terraform and Ansible to install software on virtual server instances running in a Virtual Private Cloud.",
          "imgSrc": "images/solution49-vpc-app-deploy/ArchitectureDiagram.png",
          "tags": [
            "Infrastructure",
            "Virtual Private Cloud",
            "Network"
          ],
          "requirements": [
            "vpc",
            "ansible"
          ],
          "supportsCloudShell": false
        },
        {
          "name": "Securely access remote instances with a bastion host",
          "url": "vpc-secure-management-bastion-server.html",
          "description": "Deploy a bastion host to securely access remote instances within a virtual private cloud.",
          "imgSrc": "images/solution47-vpc-secure-management-bastion-server/ArchitectureDiagram.png",
          "tags": [
            "Infrastructure",
            "Virtual Private Cloud",
            "Network"
          ],
          "requirements": [
            "vpc"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "url": "/containers/containers-vpc_ks_tutorial",
          "tags": [
            "Virtual Private Cloud",
            "Kubernetes"
          ]
        }
      ]
    },
    {
      "name": "Classic Infrastructure",
      "anchor": "classic",
      "solutions": [
        {
          "name": "Isolate workloads with a secure private network",
          "url": "secure-network-enclosure.html",
          "description": "Configure a Virtual Router Appliance to create a secure enclosure. Associate VLANs, provision servers, setup IP routing and firewalls.",
          "imgSrc": "images/solution33-secure-network-enclosure/Secure-priv-enc.png",
          "tags": [
            "Infrastructure",
            "Vyatta",
            "Firewall",
            "Network"
          ],
          "requirements": [
            "virtual_router_appliance",
            "classic_infrastructure"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Configure NAT for Internet access from a private network",
          "url": "nat-config-private.html",
          "description": "Use NAT masquerade to translate private IP addresses to out-bound public interface.",
          "imgSrc": "images/solution35-nat-config-private/vra-nat.png",
          "tags": [
            "Infrastructure",
            "Vyatta",
            "Firewall",
            "Network"
          ],
          "requirements": [
            "virtual_router_appliance",
            "classic_infrastructure"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Bring Your Own IP Address",
          "url": "byoip.html",
          "description": "An overview of BYOIP implementation patterns and a guide to identify the appropriate pattern.",
          "imgSrc": "images/solution37-byoip/byoipdecision.png",
          "tags": [
            "Infrastructure",
            "Vyatta",
            "Firewall",
            "Network"
          ],
          "requirements": [
            "virtual_router_appliance"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "VPN into a secure private network",
          "url": "configuring-IPSEC-VPN.html",
          "description": "Create a private connection between a remote network environment and servers on IBM Cloud's private network.",
          "imgSrc": "images/solution36-configuring-IPSEC-VPN/sec-priv-vpn.png",
          "tags": [
            "Infrastructure",
            "Vyatta",
            "Firewall",
            "Network"
          ],
          "requirements": [],
          "supportsCloudShell": "not_applicable"
        },
        {
          "name": "Linking secure private networks over the IBM network",
          "url": "linking-secure-network-enclosures.html",
          "description": "Deploy two private networks that are securely linked over the IBM Cloud private network using the VLAN Spanning service.",
          "imgSrc": "images/solution43-linking-secure-network-enclosures/vlan-spanning.png",
          "tags": [
            "Infrastructure",
            "Vyatta",
            "Firewall",
            "Network",
            "VLAN Spanning"
          ],
          "requirements": [
            "virtual_router_appliance",
            "vlan_spanning"
          ],
          "supportsCloudShell": "yes_with_modifications"
        },
        {
          "name": "Hosting web applications from a secure private network",
          "url": "web-app-private-network.html",
          "description": "Create a scalable and secure Internet facing web application hosted in private network secured using a virtual router appliance (VRA), VLANs, NAT and firewalls.",
          "imgSrc": "images/solution42-web-app-private-network/web-app-private.png",
          "tags": [
            "Infrastructure",
            "Firewall",
            "Load Balancer",
            "Network",
            "Virtual Router Appliance VPN"
          ],
          "requirements": [
            "virtual_router_appliance",
            "vlan_spanning"
          ],
          "supportsCloudShell": "not_applicable"
        }
      ]
    },
    {
      "name": "VMware Solutions",
      "anchor": "vmware",
      "solutions": [
        {
          "name": "Getting Started with IBM Cloud for VMware Solutions Shared",
          "url": "vmware-solutions-shared-getting-started.html",
          "description": "Create a network for Internet and IBM Cloud private access inside of a VMware virtual data center and deploy a virtual machine.",
          "imgSrc": "images/solution58-vmware-solutions-getting-started/Architecture.png",
          "tags": [
            "VMware"
          ],
          "requirements": [
            "vmware",
            "schematics"
          ]
        }
      ]
    }
  ]
}
